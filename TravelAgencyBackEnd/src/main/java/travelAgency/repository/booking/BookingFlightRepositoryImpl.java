package travelAgency.repository.booking;

import travelAgency.domain.FlightTicket;
import travelAgency.repository.db.DbConnection;

import java.sql.*;
import java.util.List;
import java.util.Optional;

public class BookingFlightRepositoryImpl implements BookingFlightRepository {

    private static final String INSERT_QUERY = """
            INSERT INTO tickets
            (ticket_number,flight_number,passenger_id,number_of_tickets)
            VALUES (?,?,?,?)
            """;

    private static final String TABLE_NAME = "tickets";

    private final DbConnection db;
    private final Connection connection;
    private final BookingListRepository bookingListRepository;

    public BookingFlightRepositoryImpl(DbConnection db) {
        this.db = db;
        this.connection = db.getConnection();
        this.bookingListRepository = new BookingListRepositoryImpl(db);
    }

    @Override
    public int book(FlightTicket flightTicket) {
        int lastId = -1;
        try (final PreparedStatement sql = createQuery(INSERT_QUERY, Statement.RETURN_GENERATED_KEYS)) {
            fillFlightTicket(flightTicket, sql);
            sql.executeUpdate();
            final ResultSet resultSet = sql.getGeneratedKeys();
            if (resultSet.next()) {
                lastId = resultSet.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return lastId;
    }

    private PreparedStatement createQuery(String query, int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement(query, autoGeneratedKeys);
    }

    private void fillFlightTicket(FlightTicket flightTicket, PreparedStatement sql) throws SQLException {
        sql.setString(1, flightTicket.ticketNumber());
        sql.setString(2, flightTicket.flightNumber());
        sql.setString(3, flightTicket.passenger_id());
        sql.setInt(4, flightTicket.numberOfTickets());
    }

    @Override
    public Optional<FlightTicket> ticket(String ticketNumber) {
        return bookingListRepository.ticket(ticketNumber);
    }

    @Override
    public List<FlightTicket> tickets() {
        return bookingListRepository.tickets();
    }

    @Override
    public void truncate() {
        db.truncate(TABLE_NAME);
    }
}
